import { logger } from '@/lib/utils';

/**
 * Formata o n√∫mero de telefone para o formato internacional
 * @param phoneNumber N√∫mero de telefone para formatar
 * @returns N√∫mero formatado para padr√£o internacional (ex: 5511999999999)
 */
export const formatPhoneNumber = (phoneNumber?: string): string | null => {
  if (!phoneNumber) return null;
  
  try {
    // Remove todos os caracteres n√£o num√©ricos
    let cleaned = phoneNumber.replace(/\D/g, '');
    
    // Se estiver vazio ap√≥s limpeza, retorna null
    if (!cleaned || cleaned.length < 8) {
      logger.warn('N√∫mero de telefone inv√°lido (muito curto):', phoneNumber);
      return null;
    }
    
    // Se j√° come√ßa com 55 (Brasil) e tem pelo menos 12 d√≠gitos (55 + DDD + n√∫mero)
    if (cleaned.startsWith('55') && cleaned.length >= 12) {
      logger.log('N√∫mero j√° em formato internacional:', cleaned);
      return cleaned;
    }
    
    // Se come√ßa com 0, remove o zero
    if (cleaned.startsWith('0')) {
      cleaned = cleaned.substring(1);
    }
    
    // Se tem 8-9 d√≠gitos, assume que √© um n√∫mero sem DDD e n√£o pode ser usado
    if (cleaned.length < 10) {
      logger.warn('N√∫mero sem DDD detectado:', phoneNumber);
      return null;
    }
    
    // Adiciona o c√≥digo do pa√≠s Brasil (55) se n√£o tiver
    return cleaned.startsWith('55') ? cleaned : `55${cleaned}`;
  } catch (error) {
    logger.error('Erro ao formatar n√∫mero de telefone:', phoneNumber, error);
    return null;
  }
};

/**
 * Obt√©m um link de WhatsApp para conversa direta com um n√∫mero
 */
export const getWhatsAppLink = (phoneNumber?: string, message: string = ''): string | null => {
  const formattedPhone = formatPhoneNumber(phoneNumber);
  if (!formattedPhone) return null;
  
  // Se n√£o houver mensagem, retorna apenas o link para o n√∫mero
  if (!message) {
    return `https://wa.me/${formattedPhone}`;
  }
  
  try {
    // Limita a mensagem para n√£o exceder o limite de URL (cerca de 2000 caracteres √© seguro)
    const limitedMessage = message.length > 1000 ? message.substring(0, 1000) + '...' : message;
    const encodedMessage = encodeURIComponent(limitedMessage);
    
    // Verifica se o link completo n√£o √© muito grande
    const fullLink = `https://wa.me/${formattedPhone}?text=${encodedMessage}`;
    if (fullLink.length > 2000) {
      // Se for muito grande, retorna um link mais simples com uma mensagem mais curta
      logger.warn('Link do WhatsApp muito longo, reduzindo mensagem');
      const shorterMessage = 'Ol√°! Tenho informa√ß√µes para compartilhar com voc√™. Iniciando conversa...';
      return `https://wa.me/${formattedPhone}?text=${encodeURIComponent(shorterMessage)}`;
    }
    
    return fullLink;
  } catch (error) {
    logger.error('Erro ao gerar link do WhatsApp:', error);
    // Em caso de erro, retorna apenas o link do n√∫mero sem mensagem
    return `https://wa.me/${formattedPhone}`;
  }
};

/**
 * Envia uma mensagem para o WhatsApp (vers√£o simulada)
 * @param phoneNumberOrConfig N√∫mero de telefone ou configura√ß√£o
 * @param message Mensagem a ser enviada (opcional se phoneNumberOrConfig for um objeto)
 * @returns Resultado da opera√ß√£o
 */
export const sendWhatsAppMessage = async (
  phoneNumberOrConfig: string | { phoneNumber: string; message: string },
  message?: string
): Promise<{success: boolean, error?: string}> => {
  try {
    let phoneNumber: string;
    let messageText: string;
    
    if (typeof phoneNumberOrConfig === 'string') {
      if (!message) {
        throw new Error('Mensagem √© obrigat√≥ria quando o primeiro par√¢metro √© um n√∫mero de telefone');
      }
      phoneNumber = phoneNumberOrConfig;
      messageText = message;
    } else {
      phoneNumber = phoneNumberOrConfig.phoneNumber;
      messageText = phoneNumberOrConfig.message;
    }

    // Formata o n√∫mero de telefone
    const formattedPhone = formatPhoneNumber(phoneNumber);
    if (!formattedPhone) {
      throw new Error('N√∫mero de telefone inv√°lido');
    }

    // Simula o envio da mensagem
    logger.log('üîµ [SIMULA√á√ÉO] Enviando mensagem via WhatsApp:');
    logger.log('üì± Para:', formattedPhone);
    logger.log('üí¨ Mensagem:', messageText);
    
    // Simula um pequeno atraso
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Simula uma chance de falha de 5% para demonstrar tratamento de erros
    if (Math.random() < 0.05) {
      logger.error('‚ùå [SIMULA√á√ÉO] Falha simulada no envio da mensagem');
      return { success: false, error: 'Falha simulada no envio da mensagem' };
    }
    
    logger.log('‚úÖ [SIMULA√á√ÉO] Mensagem enviada com sucesso');
    return { success: true };
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Ocorreu um erro ao enviar a mensagem';
    logger.error('Erro ao enviar mensagem via WhatsApp:', error);
    return { success: false, error: errorMessage };
  }
}; 