import { supabase } from './supabaseClient';
import { toast } from '@/hooks/use-toast';

// Tipos
export interface User {
  id: string;
  email: string;
  role: 'admin' | 'leader' | 'user';
  username?: string;
  display_name?: string;
  first_name?: string;
  phone_number?: string;
  bio?: string;
  avatar_url?: string;
  created_at?: string;
  profile_views?: number;
}

// Login com email/senha via Supabase Auth
export const signInWithEmailViaSupabase = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) throw error;
    return data.user;
  } catch (error: any) {
    toast({
      title: "Erro ao fazer login",
      description: error.message,
      variant: "destructive"
    });
    return null;
  }
};

/**
 * Login com email e senha simplificado
 * Usa nosso sistema de autentica√ß√£o manual
 */
export async function signInWithEmail(email: string, password: string): Promise<User | null> {
  try {
    console.log(`üîí Tentando login: ${email}`);

    // Limpar dados de usu√°rio tempor√°rio que possam estar causando conflitos
    const tempUserKey = 'temp_user_' + email.replace('@', '_at_');
    localStorage.removeItem(tempUserKey);
    
    // Buscar usu√°rio diretamente da tabela users
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('email', email)
      .single();
    
    if (error || !user) {
      console.error('‚ùå Usu√°rio n√£o encontrado:', error);
      throw new Error('Email ou senha incorretos.');
    }
    
    // Verificar a senha (voc√™ precisar√° implementar a fun√ß√£o de hash para compara√ß√£o)
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashedPassword = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    if (hashedPassword !== user.password_hash) {
      console.error('‚ùå Senha incorreta');
      throw new Error('Email ou senha incorretos.');
    }
    
    // Login bem-sucedido, armazenar informa√ß√µes
    localStorage.setItem('current_user_id', user.id);
    localStorage.setItem('current_user_email', user.email);
    
    console.log(`‚úÖ Login bem-sucedido para: ${email}`);
    
    return user as User;
  } catch (error: any) {
    console.error(`‚ùå Erro no login:`, error);
    throw error;
  }
}

/**
 * Login com Google via OAuth
 */
export const signInWithGoogle = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: `${window.location.origin}/auth/callback`
      }
    });

    if (error) throw error;
    return data;
  } catch (error: any) {
    toast({
      title: "Erro ao fazer login com Google",
      description: error.message,
      variant: "destructive"
    });
    return null;
  }
};

/**
 * Registro com email e senha
 * Vers√£o 5 - usando fun√ß√£o RPC segura que contorna problemas de RLS
 */
export async function signUpWithEmail(
  email: string,
  password: string,
  firstName: string, 
  phoneNumber: string
): Promise<User | null> {
  console.log("üöÄ Iniciando processo de registro");
  
  // Gerar UUID para o caso de precisarmos criar o usu√°rio manualmente
  const fallbackId = crypto.randomUUID();
  
  try {
    // ETAPA 1: Tentar registrar via auth.signUp padr√£o
    let userId = null;
    let authSuccess = false;
    
    try {
      console.log("üîë Tentando registro padr√£o via auth.signUp");
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: `${window.location.origin}/login`,
          data: {
            first_name: firstName,
            phone_number: phoneNumber
          }
        }
      });
      
      if (error) throw error;
      
      if (data?.user?.id) {
        userId = data.user.id;
        authSuccess = true;
        console.log("‚úÖ Usu√°rio registrado com sucesso no Auth:", userId);
      } else {
        throw new Error("Dados de usu√°rio n√£o retornados pelo Auth");
      }
    } catch (signUpError: any) {
      // Se o erro for de email j√° registrado, relan√ßar o erro
      if (signUpError.message && signUpError.message.includes("already registered")) {
        throw new Error("Este email j√° est√° registrado");
      }
      
      // Para outros erros, seguir com o fluxo alternativo
      console.warn("‚ö†Ô∏è Erro no registro Auth:", signUpError.message);
      console.log("üîÑ Seguindo para fluxo alternativo...");
    }
    
    // Se conseguiu criar no Auth, tentar criar o perfil diretamente
    if (authSuccess && userId) {
      try {
        console.log("üë§ Tentando criar perfil para ID:", userId);
        const { data: profile, error: profileError } = await supabase
          .from('users')
          .insert({
            id: userId,
            email: email,
            first_name: firstName,
            phone_number: phoneNumber,
            role: 'user',
            created_at: new Date().toISOString()
          })
          .select()
          .single();
        
        if (!profileError && profile) {
          console.log("‚úÖ Perfil criado com sucesso!");
          return profile as User;
        }
      } catch (profileError) {
        console.warn("‚ö†Ô∏è Erro ao criar perfil:", profileError);
      }
    }
    
    // ETAPA 2: Se o perfil n√£o p√¥de ser criado, tente usar SQL diretamente
    // Este m√©todo s√≥ funciona no Supabase se voc√™ tiver uma fun√ß√£o SQL do lado do servidor
    try {
      console.log("üîß Tentando criar usu√°rio via RPC (stored procedure)");
      const { data: rpcResult, error: rpcError } = await supabase.rpc('create_full_user', {
        p_email: email,
        p_password: password,
        p_first_name: firstName,
        p_phone_number: phoneNumber
      });
      
      if (!rpcError && rpcResult && rpcResult.user_id) {
        console.log("‚úÖ Usu√°rio criado via RPC:", rpcResult.user_id);
        return {
          id: rpcResult.user_id,
          email: email,
          role: 'user',
          first_name: firstName,
          phone_number: phoneNumber,
          created_at: new Date().toISOString()
        };
      } else {
        console.warn("‚ö†Ô∏è Erro no RPC:", rpcError?.message);
      }
    } catch (rpcError) {
      console.warn("‚ö†Ô∏è Erro ao chamar RPC:", rpcError);
    }
    
    // ETAPA 3: Como √∫ltimo recurso, use REST API diretamente
    // Esta abordagem pode falhar por causa de pol√≠ticas de CORS ou permiss√µes
    try {
      console.log("üì° Tentando criar usu√°rio via REST API");
      const userApiResponse = await fetch(`${supabase.supabaseUrl}/rest/v1/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': supabase.supabaseKey,
          'Authorization': `Bearer ${supabase.supabaseKey}`
        },
        body: JSON.stringify({
          id: userId || fallbackId,
          email: email,
          first_name: firstName,
          phone_number: phoneNumber,
          role: 'user',
          created_at: new Date().toISOString()
        })
      });
      
      if (userApiResponse.ok) {
        const userData = await userApiResponse.json();
        console.log("‚úÖ Usu√°rio criado via REST API:", userData);
        return userData as User;
      }
    } catch (apiError) {
      console.warn("‚ö†Ô∏è Erro na REST API:", apiError);
    }
    
    // ETAPA 4: Se todas as tentativas falharem, use dados tempor√°rios em mem√≥ria
    console.log("‚ö†Ô∏è Todas as tentativas falharam! Usando dados tempor√°rios.");
    
    // Criar objeto de usu√°rio tempor√°rio
    const tempUser: User = {
      id: userId || fallbackId,
      email: email,
      role: 'user',
      first_name: firstName,
      phone_number: phoneNumber,
      created_at: new Date().toISOString()
    };
    
    // Armazenar no localStorage para futuras recupera√ß√µes
    localStorage.setItem('temp_user_' + email.replace('@', '_at_'), JSON.stringify(tempUser));
    
    return tempUser;
    
  } catch (error: any) {
    console.error("‚ùå Erro cr√≠tico no registro:", error);
    throw error;
  }
}

/**
 * Obter o usu√°rio atual usando nosso sistema manual de autentica√ß√£o
 * Vers√£o melhorada que usa cache local quando poss√≠vel
 */
export const getCurrentUser = async (userId?: string): Promise<User | null> => {
  try {
    // Se um ID espec√≠fico foi passado, usar ele
    // Caso contr√°rio, pegar do localStorage
    const id = userId || localStorage.getItem('current_user_id');
    
    if (!id) {
      console.log('Nenhum ID de usu√°rio encontrado');
      return null;
    }
    
    // Verificar se temos o usu√°rio em cache e se √© o mesmo ID
    const cachedUserStr = localStorage.getItem('current_user');
    const cacheTime = localStorage.getItem('current_user_cache_time');
    
    if (cachedUserStr && cacheTime) {
      const cachedUser = JSON.parse(cachedUserStr);
      const cacheAge = Date.now() - parseInt(cacheTime);
      
      // Se o cache tem menos de 15 minutos e √© o mesmo usu√°rio, usar direto
      if (cacheAge < 15 * 60 * 1000 && cachedUser.id === id) {
        console.log('Usando dados de usu√°rio em cache');
        return cachedUser as User;
      }
    }
    
    // Se n√£o temos cache ou est√° velho, buscar do banco
    console.log('Buscando dados de usu√°rio do banco');
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', id)
      .single();
    
    if (error) {
      console.error('Erro ao buscar usu√°rio:', error);
      return null;
    }
    
    if (!data) {
      console.log('Nenhum usu√°rio encontrado com esse ID');
      return null;
    }
    
    // Transformar os dados para o tipo User
    const user: User = {
      id: data.id,
      email: data.email,
      role: data.role || 'user',
      username: data.username,
      first_name: data.first_name,
      phone_number: data.phone_number,
      bio: data.bio,
      avatar_url: data.avatar_url,
      created_at: data.created_at,
      profile_views: data.profile_views
    };
    
    // Atualizar o cache
    localStorage.setItem('current_user', JSON.stringify(user));
    localStorage.setItem('current_user_cache_time', Date.now().toString());
    
    return user;
  } catch (error) {
    console.error('Erro ao obter usu√°rio atual:', error);
    return null;
  }
};

/**
 * Verificar se o usu√°rio est√° autenticado
 * Vers√£o melhorada que verifica o localStorage e mant√©m uma c√≥pia em cache do usu√°rio
 */
export const isAuthenticated = async (): Promise<boolean> => {
  try {
    const id = localStorage.getItem('current_user_id');
    if (!id) {
      console.log('Nenhum ID de usu√°rio encontrado no localStorage');
      return false;
    }
    
    // Verificar se temos o usu√°rio em cache no localStorage
    const cachedUserStr = localStorage.getItem('current_user');
    if (cachedUserStr) {
      // Verificar se o cache n√£o est√° muito antigo (15 minutos)
      const cachedUser = JSON.parse(cachedUserStr);
      const cacheTime = localStorage.getItem('current_user_cache_time');
      
      if (cacheTime) {
        const cacheAge = Date.now() - parseInt(cacheTime);
        // Se o cache tem menos de 15 minutos, usar direto
        if (cacheAge < 15 * 60 * 1000) {
          return true;
        }
      }
    }
    
    // Se n√£o temos cache ou est√° velho, verificar no banco
    const user = await getCurrentUser(id);
    
    if (user) {
      // Atualizar o cache
      localStorage.setItem('current_user', JSON.stringify(user));
      localStorage.setItem('current_user_cache_time', Date.now().toString());
      return true;
    }
    
    // Se n√£o encontramos o usu√°rio, limpar os dados
    console.log('Usu√°rio n√£o encontrado no banco, limpando dados');
    localStorage.removeItem('current_user_id');
    localStorage.removeItem('current_user_email');
    localStorage.removeItem('current_user');
    localStorage.removeItem('current_user_cache_time');
    return false;
  } catch (error) {
    console.error('Erro ao verificar autentica√ß√£o:', error);
    return false;
  }
};

/**
 * Verificar status de autentica√ß√£o
 */
export const checkAuthStatus = async (): Promise<boolean> => {
  return await isAuthenticated();
};

/**
 * Fazer logout
 * Vers√£o melhorada que limpa todos os dados de sess√£o
 */
export const signOut = async (): Promise<void> => {
  localStorage.removeItem('current_user_id');
  localStorage.removeItem('current_user_email');
  localStorage.removeItem('current_user');
  localStorage.removeItem('current_user_cache_time');
  
  // Disparar evento para notificar os componentes sobre a mudan√ßa
  window.dispatchEvent(new Event('auth-state-changed'));
  
  // Redirecionar para a p√°gina de login
  window.location.href = '/login';
};

/**
 * Verificar se o usu√°rio √© admin
 */
export const isAdmin = async (): Promise<boolean> => {
  const user = await getCurrentUser();
  return user?.role === 'admin';
};

/**
 * Verificar se o usu√°rio √© l√≠der
 */
export const isLeader = async (): Promise<boolean> => {
  const user = await getCurrentUser();
  return user?.role === 'leader' || user?.role === 'admin';
};

/**
 * Limpar todos os dados de autentica√ß√£o
 */
export function clearAllAuthData(): void {
  console.log("üßπ Limpando todos os dados de autentica√ß√£o...");
  
  // Limpar localStorage
  localStorage.removeItem('current_user_id');
  localStorage.removeItem('current_user_email');
  localStorage.removeItem('current_user');
  
  // Limpar qualquer chave que comece com temp_user_
  Object.keys(localStorage).forEach(key => {
    if (key.startsWith('temp_user_')) {
      localStorage.removeItem(key);
    }
  });
  
  console.log("‚úÖ Dados de autentica√ß√£o limpos com sucesso");
}

/**
 * Obter usu√°rio pelo ID
 * Vers√£o simplificada que busca o usu√°rio na tabela users
 */
export async function getUserById(userId: string): Promise<User | null> {
  try {
    console.log(`üîç Buscando usu√°rio pelo ID: ${userId}`);
    
    // Buscar na tabela users
    const { data: userProfile, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error(`‚ùå Erro ao buscar usu√°rio: ${error.message}`);
      return null;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado`);
    return userProfile as User;
  } catch (error: any) {
    console.error(`‚ùå Erro inesperado: ${error?.message}`);
    return null;
  }
}

/**
 * Atualizar perfil do usu√°rio
 * Vers√£o simplificada que atualiza os dados do perfil na tabela users
 */
export async function updateUserProfile(userId: string, userData: Partial<User> & { displayName?: string, avatarUrl?: string }): Promise<User | null> {
  try {
    console.log(`‚úèÔ∏è Atualizando perfil do usu√°rio: ${userId}`);
    
    // Mapear campos para o formato correto (adapta√ß√£o de camelCase para snake_case)
    const dataToUpdate = {
      display_name: userData.display_name || userData.displayName,
      bio: userData.bio,
      avatar_url: userData.avatar_url || userData.avatarUrl
    };
    
    // Atualizar na tabela users
    const { data: updatedProfile, error } = await supabase
      .from('users')
      .update(dataToUpdate)
      .eq('id', userId)
      .select()
      .single();
      
    if (error) {
      console.error(`‚ùå Erro ao atualizar perfil: ${error.message}`);
      toast({
        title: "Erro ao atualizar perfil",
        description: "N√£o foi poss√≠vel salvar as altera√ß√µes",
        variant: "destructive"
      });
      return null;
    }
    
    // Atualizar no localStorage
    const cachedUser = localStorage.getItem('current_user');
    if (cachedUser) {
      const user = JSON.parse(cachedUser);
      if (user.id === userId) {
        const updatedUser = { ...user, ...dataToUpdate };
        localStorage.setItem('current_user', JSON.stringify(updatedUser));
      }
    }
    
    console.log(`‚úÖ Perfil atualizado com sucesso`);
    toast({
      title: "Perfil atualizado",
      description: "As altera√ß√µes foram salvas com sucesso"
    });
    
    return updatedProfile as User;
  } catch (error: any) {
    console.error(`‚ùå Erro inesperado: ${error?.message}`);
    toast({
      title: "Erro ao atualizar perfil",
      description: "Ocorreu um erro inesperado ao salvar as altera√ß√µes",
      variant: "destructive"
    });
    return null;
  }
}

/**
 * Criar conta de teste (apenas para desenvolvimento)
 * Vers√£o simplificada que cria uma conta sem verifica√ß√£o de email
 */
export const devCreateTestAccount = async (email: string, password: string, username: string) => {
  try {
    console.log(`üß™ Criando conta de teste: ${email}`);
    
    // 1. Verificar se o email j√° existe
    const { data: existingUser } = await supabase
      .from('users')
      .select('email')
      .eq('email', email)
      .maybeSingle();
      
    if (existingUser) {
      console.error(`‚ùå Email j√° registrado: ${email}`);
      return {
        success: false,
        message: "Este email j√° est√° sendo usado por outra conta"
      };
    }
    
    // 2. Registrar no Auth do Supabase
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: { username }
      }
    });
    
    if (error) {
      console.error(`‚ùå Erro ao criar conta de teste: ${error.message}`);
      return {
        success: false,
        message: error.message
      };
    }
    
    if (!data.user) {
      console.error(`‚ùå Dados do usu√°rio n√£o retornados pelo Supabase`);
      return {
        success: false,
        message: "N√£o foi poss√≠vel criar a conta de teste"
      };
    }
    
    // 3. Criar perfil na tabela users
    const userId = data.user.id;
    const newUser = {
      id: userId,
      email: email,
      username: username,
      first_name: username,
      display_name: username,
      phone_number: "",
      role: "user",
      created_at: new Date().toISOString(),
    };
    
    const { error: profileError } = await supabase
      .from('users')
      .insert([newUser]);
      
    if (profileError) {
      console.error(`‚ùå Erro ao criar perfil: ${profileError.message}`);
      return {
        success: true,
        message: "Conta criada, mas n√£o foi poss√≠vel salvar o perfil"
      };
    }
    
    // 4. Login autom√°tico
    try {
      await supabase.auth.signInWithPassword({
        email,
        password
      });
      console.log(`‚úÖ Login autom√°tico realizado`);
    } catch (loginError) {
      console.error(`‚ö†Ô∏è N√£o foi poss√≠vel fazer login autom√°tico: ${loginError}`);
    }
    
    console.log(`‚úÖ Conta de teste criada com sucesso`);
    return {
      success: true,
      message: "Conta de teste criada com sucesso",
      user: data.user
    };
  } catch (error: any) {
    console.error(`‚ùå Erro inesperado: ${error?.message}`);
    return {
      success: false,
      message: error.message || "Erro ao criar conta de teste"
    };
  }
};

/**
 * Confirmar email de usu√°rio (apenas para desenvolvimento)
 * Vers√£o simplificada que tenta confirmar um email usando RPC
 */
export const devConfirmUserEmail = async (email: string) => {
  try {
    console.log(`üß™ Tentando confirmar email: ${email}`);
    
    // Tentativa de usar RPC (requer fun√ß√£o personalizada no Supabase)
    try {
      const { error } = await supabase.rpc('confirm_user_email', { 
        email_to_confirm: email 
      });
      
      if (error) {
        console.error(`‚ùå Erro ao confirmar email via RPC: ${error.message}`);
        return {
          success: false,
          message: `N√£o foi poss√≠vel confirmar o email: ${error.message}`
        };
      }
      
      console.log(`‚úÖ Email confirmado com sucesso via RPC`);
      return {
        success: true,
        message: "Email confirmado com sucesso"
      };
    } catch (rpcError: any) {
      console.error(`‚ùå Fun√ß√£o RPC n√£o dispon√≠vel: ${rpcError?.message}`);
      return {
        success: false,
        message: "Fun√ß√£o de confirma√ß√£o n√£o dispon√≠vel no servidor"
      };
    }
  } catch (error: any) {
    console.error(`‚ùå Erro inesperado: ${error?.message}`);
    return {
      success: false,
      message: error.message || "Erro ao confirmar email"
    };
  }
};

/**
 * Atualizar papel do usu√°rio pelo email
 * Vers√£o simplificada que atualiza o papel na tabela users
 */
export const updateUserRoleByEmail = async (email: string, newRole: string) => {
  try {
    console.log(`üëë Atualizando papel do usu√°rio ${email} para ${newRole}`);
    
    // 1. Verificar se o papel √© v√°lido
    if (!['admin', 'leader', 'user'].includes(newRole)) {
      throw new Error('Papel inv√°lido. Deve ser admin, leader ou user');
    }
    
    // 2. Buscar o usu√°rio pelo email
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('email', email)
      .single();
      
    if (userError || !user) {
      console.error(`‚ùå Usu√°rio n√£o encontrado: ${userError?.message}`);
      throw new Error('Usu√°rio n√£o encontrado');
    }
    
    // 3. Atualizar o papel do usu√°rio
    const { error: updateError } = await supabase
      .from('users')
      .update({ role: newRole })
      .eq('id', user.id);
      
    if (updateError) {
      console.error(`‚ùå Erro ao atualizar papel: ${updateError.message}`);
      throw new Error(`Erro ao atualizar papel: ${updateError.message}`);
    }
    
    console.log(`‚úÖ Papel atualizado com sucesso`);
    
    // 4. Atualizar localStorage se for o usu√°rio atual
    const cachedUser = localStorage.getItem('current_user');
    if (cachedUser) {
      const currentUser = JSON.parse(cachedUser);
      if (currentUser.email === email) {
        currentUser.role = newRole;
        localStorage.setItem('current_user', JSON.stringify(currentUser));
      }
    }
    
    return true;
  } catch (error: any) {
    console.error(`‚ùå Erro ao atualizar papel do usu√°rio: ${error?.message}`);
    throw error;
  }
};

/**
 * Obter todos os usu√°rios do sistema
 * Usado principalmente pela interface de administra√ß√£o
 */
export const getAllUsers = async (): Promise<User[]> => {
  try {
    console.log('üîç Buscando todos os usu√°rios');
    
    // Verificar se o usu√°rio atual tem permiss√£o (deve ser admin ou leader)
    const userIsAdmin = await isAdmin();
    const userIsLeader = await isLeader();
    
    if (!userIsAdmin && !userIsLeader) {
      console.error('‚ùå Usu√°rio sem permiss√£o para listar todos os usu√°rios');
      throw new Error('Voc√™ n√£o tem permiss√£o para visualizar todos os usu√°rios');
    }
    
    // Buscar todos os usu√°rios da tabela users
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      throw new Error('N√£o foi poss√≠vel obter a lista de usu√°rios');
    }
    
    console.log(`‚úÖ ${data.length} usu√°rios encontrados`);
    
    // Transformar cada registro para o formato correto da interface User
    return data.map(user => ({
      id: user.id,
      email: user.email,
      role: user.role || 'user',
      username: user.username || '',
      displayName: user.display_name || user.first_name || user.username || user.email,
      bio: user.bio || '',
      avatarUrl: user.avatar_url || '',
      createdAt: user.created_at || '',
      profileViews: user.profile_views || 0
    }));
  } catch (error) {
    console.error('‚ùå Erro ao obter todos os usu√°rios:', error);
    throw error;
  }
};

/**
 * Atualizar papel/fun√ß√£o de um usu√°rio pelo ID
 * Usado principalmente pela interface de administra√ß√£o
 */
export const updateUserRole = async (userId: string, newRole: string): Promise<boolean> => {
  try {
    console.log(`üëë Atualizando papel do usu√°rio ${userId} para ${newRole}`);
    
    // Verificar se o papel √© v√°lido
    if (!['admin', 'leader', 'user'].includes(newRole)) {
      throw new Error('Papel inv√°lido. Deve ser admin, leader ou user');
    }
    
    // Verificar se o usu√°rio atual tem permiss√£o (deve ser admin ou leader)
    const userIsAdmin = await isAdmin();
    const userIsLeader = await isLeader();
    
    if (!userIsAdmin && !userIsLeader) {
      console.error('‚ùå Usu√°rio sem permiss√£o para atualizar pap√©is');
      throw new Error('Voc√™ n√£o tem permiss√£o para modificar pap√©is de usu√°rios');
    }
    
    // Leaders s√≥ podem modificar usu√°rios normais
    if (userIsLeader && !userIsAdmin) {
      // Verificar se o usu√°rio alvo n√£o √© admin
      const { data: targetUser } = await supabase
        .from('users')
        .select('role')
        .eq('id', userId)
        .single();
        
      if (targetUser?.role === 'admin') {
        throw new Error('L√≠deres n√£o podem modificar administradores');
      }
      
      // L√≠deres n√£o podem criar administradores
      if (newRole === 'admin') {
        throw new Error('L√≠deres n√£o podem promover a administrador');
      }
    }
    
    // Atualizar o papel do usu√°rio
    const { error } = await supabase
      .from('users')
      .update({ role: newRole })
      .eq('id', userId);
      
    if (error) {
      console.error(`‚ùå Erro ao atualizar papel: ${error.message}`);
      throw new Error(`Erro ao atualizar papel: ${error.message}`);
    }
    
    console.log(`‚úÖ Papel atualizado com sucesso`);
    
    // Atualizar localStorage se for o usu√°rio atual
    const currentUserId = localStorage.getItem('current_user_id');
    if (currentUserId === userId) {
      const cachedUser = localStorage.getItem('current_user');
      if (cachedUser) {
        const user = JSON.parse(cachedUser);
        user.role = newRole;
        localStorage.setItem('current_user', JSON.stringify(user));
        
        // Disparar evento para notificar componentes sobre a mudan√ßa
        window.dispatchEvent(new Event('auth-state-changed'));
      }
    }
    
    return true;
  } catch (error: any) {
    console.error(`‚ùå Erro ao atualizar papel do usu√°rio: ${error?.message}`);
    throw error;
  }
}; 